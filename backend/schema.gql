# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input CreateEntInput {
  description: String
  parentId: Int
  title: String!
  type: EntType!
}

input CreateOrganizationsInput {
  creatorId: Int!
  description: String
  ents: [Int!]
  image: String
  parentId: Int
  status: OrganizationStatus!
  title: String!
  url: String
  users: [Int!]
}

input CreateUserInput {
  email: String!
  password: String!
  role: String!
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type DeleteEntetyResultModel {
  affected: Int
}

input DeleteUserInput {
  id: Int!
}

type EntEntity {
  createDate: DateTime!
  creator: UserModel!
  description: String!
  editDate: DateTime
  editor: UserModel
  id: Int!
  organizations: [OrganizationModel!]
  parent: EntEntity
  title: String!
  type: EntType!
}

type EntOutput {
  createDate: DateTime!
  creator: UserModel!
  dependentCount: Int
  description: String!
  editDate: DateTime
  editor: UserModel
  id: Int!
  organizations: [OrganizationModel!]
  parent: EntEntity
  title: String!
  type: EntType!
}

enum EntType {
  COHORT
  DISTRICT
  OTHER
  SCHOOL
  STATE
  SYSTEM
}

input FilterInput {
  id: Int
  title: String
  types: [EntType!]
}

type GetEntOutput {
  createDate: DateTime!
  creator: UserModel!
  dependents: [GetEntOutput!]
  description: String!
  editDate: DateTime
  editor: UserModel
  id: Int!
  organizations: [OrganizationModel!]
  parent: EntEntity
  title: String!
  type: EntType!
}

type GetEntsOutput {
  ents: [EntOutput!]!
  totalCount: Int!
}

input GetUserInput {
  email: String
  id: Int
}

input GetUsersInput {
  roles: [String!]
}

type Mutation {
  createEnt(createEntInput: CreateEntInput!): GetEntOutput!

  """This graphql method for create organizations"""
  createOrganization(organizationInput: CreateOrganizationsInput!): OrganizationModel!

  """This graphql method for registration new user"""
  createUser(userInput: CreateUserInput!): UserModel!
  deleteEnt(id: Int!): Int!

  """This graphql method for deletting one organization by id"""
  deleteOrganization(
    """This graphql method for getting all organization by id """
    id: Int!
  ): DeleteEntetyResultModel!

  """This graphql method for delete user"""
  deleteUser(userInput: DeleteUserInput!): UserDeleteModel!
  updateEnt(updateEntInput: UpdateEntInput!): GetEntOutput!

  """This graphql method for update organization data"""
  updateOrganization(organizationInput: UpdateOrganizationsInput!): OrganizationModel!

  """This graphql method for update user data"""
  updateUser(userInput: UpdateUserInput!): UserUpdateModel!
}

type OrganizationModel {
  createDate: String!
  description: String
  id: Int!
  image: String
  parent: SubOrganizationModel
  status: OrganizationStatus!
  subOrganizations: [SubOrganizationModel!]!
  title: String!
  users: [OrganizationUserModel!]!
}

type OrganizationModelData {
  id: Int!
  name: String!
}

enum OrganizationStatus {
  ACTIVE
  HIDDEN
  LIMITED
}

type OrganizationUserModel {
  dateCreate: String!
  email: String!
  id: Int!
  role: String!
  status: String!
  username: String!
}

input PaginationInput {
  page: Int!
  pageSize: Int!
}

type Query {
  getEnt(id: Int!): GetEntOutput!
  getEnts(filterInput: FilterInput, paginationInput: PaginationInput!): GetEntsOutput!

  """This graphql method for getting one organization by id"""
  getOrganization(
    """This graphql method for getting all organization by id """
    id: Int!
  ): OrganizationModel!

  """This graphql method for getting all organizations"""
  getOrganizations: [OrganizationModel!]!

  """This graphql method for getting user by email or id"""
  getUser(userInput: GetUserInput!): UserModel!

  """This graphql method for getting all users"""
  getUsers(usersInput: GetUsersInput!): [UserModel!]!
}

type SubOrganizationModel {
  createDate: String!
  id: Int!
  image: String
  status: OrganizationStatus!
  title: String!
}

input UpdateEntInput {
  description: String
  id: Int!
  parentId: Int
  title: String
  type: EntType
}

input UpdateOrganizationsInput {
  creatorId: Int
  description: String
  id: Int!
  image: String
  parentId: Int
  status: OrganizationStatus
  title: String
  url: String
  users: [Int!]
}

input UpdateUserInput {
  email: String
  id: Int!
  password: String
  role: String
  username: String
}

type UserDeleteModel {
  affected: Int!
  raw: [String!]!
}

type UserModel {
  dateCreate: String!
  email: String!
  id: Int!
  organizations: [OrganizationModelData!]!
  role: String!
  status: String!
  username: String!
}

type UserUpdateModel {
  generatedMaps: [String!]!
}