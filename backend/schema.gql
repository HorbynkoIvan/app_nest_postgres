# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input CreateEntInput {
  description: String
  parentId: Int
  title: String!
  type: EntType!
}

input CreateOrganizationsInput {
  creatorId: ID!
  description: String

  """Array of ents IDs"""
  entsIds: [ID!]
  image: String
  parentId: ID
  status: OrganizationStatus!
  title: String!
  url: String

  """Array of users IDs"""
  usersIds: [ID!]
}

input CreateUserInput {
  email: String!
  loginType: LoginType!
  password: String!
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type EntEntity {
  createDate: DateTime!
  creator: UserEntity!
  description: String!
  editDate: DateTime
  editor: UserEntity
  id: Int!
  organizations: [OrganizationEntity!]
  parent: EntEntity
  title: String!
  type: EntType!
}

type EntOutput {
  createDate: DateTime!
  creator: UserEntity!
  dependentCount: Int
  description: String!
  editDate: DateTime
  editor: UserEntity
  id: Int!
  organizations: [OrganizationEntity!]
  parent: EntEntity
  title: String!
  type: EntType!
}

enum EntType {
  COHORT
  DISTRICT
  OTHER
  SCHOOL
  STATE
  SYSTEM
}

input FilterInput {
  id: Int
  title: String
  types: [EntType!]
}

type GetEntOutput {
  createDate: DateTime!
  creator: UserEntity!
  dependents: [GetEntOutput!]
  description: String!
  editDate: DateTime
  editor: UserEntity
  id: Int!
  organizations: [OrganizationEntity!]
  parent: EntEntity
  title: String!
  type: EntType!
}

type GetEntsOutput {
  ents: [EntOutput!]!
  totalCount: Int!
}

input GetUserInput {
  email: String
  id: ID
  username: String
}

type GetUsersOutput {
  totalCount: Int!
  users: [UserEntity!]!
}

input LoginInput {
  email: String
  password: String!
  username: String
}

type LoginModel {
  access_token: String!
  email: String!
  role: String!
  sub: Int!
  username: String!
}

enum LoginType {
  ADMIN
  STAFF
  SUPER_ADMIN
  VISITOR
}

type Mutation {
  createEnt(createEntInput: CreateEntInput!): GetEntOutput!

  """This graphql method for create organizations"""
  createOrganization(organizationInput: CreateOrganizationsInput!): OrganizationEntity!

  """This graphql method for registration new user"""
  createUser(userInput: CreateUserInput!): UserEntity!
  deleteEnt(id: Int!): Int!

  """This graphql method for deletting one organization by id"""
  deleteOrganization(
    """This graphql method for getting all organization by id """
    id: Int!
  ): OrganizationEntity!

  """This graphql method for delete user"""
  deleteUser(id: Float!): Int!
  updateEnt(updateEntInput: UpdateEntInput!): GetEntOutput!

  """This graphql method for update organization data"""
  updateOrganization(organizationInput: UpdateOrganizationsInput!): OrganizationEntity!

  """This graphql method for update user data"""
  updateUser(userInput: UpdateUserInput!): UserEntity!
}

type OrganizationEntity {
  createDate: DateTime!
  creator: UserEntity!
  creatorId: ID!
  description: String
  editDate: DateTime!
  editor: UserEntity
  editorId: ID
  ents: [EntEntity!]
  id: ID!
  image: String
  parent: OrganizationEntity
  parentId: ID
  status: OrganizationStatus!
  subOrganizations: [OrganizationEntity!]
  title: String!
  url: String
  users: [UserEntity!]
}

type OrganizationOutput {
  organizations: [OrganizationEntity!]!
  totalCount: Int!
}

enum OrganizationStatus {
  ACTIVE
  HIDDEN
  LIMITED
}

input OrganizationsFilterInput {
  id: ID
  title: String
}

input PaginationInput {
  """The page number (minimum: 1)"""
  page: Int!

  """The number of items per page (minimum: 1, maximum: 100)"""
  pageSize: Int!
}

type Query {
  getEnt(id: Int!): GetEntOutput!
  getEnts(filterInput: FilterInput, paginationInput: PaginationInput, sortInput: SortInput): GetEntsOutput!

  """This graphql method for getting one organization by id"""
  getOrganization(id: Int!): OrganizationEntity

  """This graphql method for getting organizations"""
  getOrganizations(filterInput: OrganizationsFilterInput, paginationInput: PaginationInput): OrganizationOutput!

  """This graphql method for getting user by email or id"""
  getUser(userInput: GetUserInput!): UserEntity!

  """This graphql method for getting all users"""
  getUsers(filterInput: UsersFilterInput, paginationInput: PaginationInput): GetUsersOutput!

  """This graphql method for login user by email"""
  loginUser(loginInput: LoginInput!): LoginModel!
  validateToken: Boolean!
}

enum SortDirection {
  ASC
  DESC
}

input SortInput {
  """Sort asc/desc"""
  sortOrderById: SortDirection! = ASC
}

input UpdateEntInput {
  description: String
  id: Int!
  parentId: Int
  title: String
  type: EntType
}

input UpdateOrganizationsInput {
  creatorId: ID
  description: String

  """Array of ents IDs"""
  entsIds: [ID!]
  id: ID!
  image: String
  parentId: ID
  status: OrganizationStatus
  title: String
  url: String

  """Array of users IDs"""
  usersIds: [ID!]
}

input UpdateUserInput {
  email: String
  id: ID!
  loginType: LoginType
  password: String
  username: String
}

type UserEntity {
  createDate: DateTime!
  email: String!
  id: ID!
  loginType: LoginType!
  organizations: [OrganizationEntity!]
  password: String!
  profile: UserProfileEntity
  status: UserStatus!
  username: String!
}

type UserProfileEntity {
  createDate: DateTime!
  firstName: String
  id: ID!
  lastName: String
  picture: String
  user: UserEntity
  userId: ID!
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DISABLED
  RESTRICTED
}

input UsersFilterInput {
  id: Int
  loginTypes: [LoginType!]
  organizationId: Int
  status: UserStatus
  username: String
}